@import "util.cocoascript";

var console = {log: Util.log}
//文档对象
var doc = null;
//多语言
var I18N = {
    'zh-cn': {
        'EXPORT': '导出',
        'EXPORTTO': '导出到：',
        'CANCELEXPORT': '您取消了导出',
        'NOARTBOARD': '没有检测到画板（Marketch目前是按画板导出图层的）',
        'EXPORTSUCCESS': '打包导出成功'
    },
    'en': {
        'EXPORT': 'Exprot',
        'EXPORTTO': 'Export to:',
        'CANCELEXPORT': 'The export is canceled',
        'NOARTBOARD': 'No artboards found',
        'EXPORTSUCCESS': 'Export success'
    }
}

var BayMax = function(){
    //所有画板
    this.allArtboards = [];
    //当前画板索引
    this.index = 0;
    //总画板数
    this.maxIndex = 0;
    //队列(用于处理图层)
    this.queue = {
        //当前正在遍历的队列
        current: [],
        //遍历过程中新产生的group
        next: []
    }
    //插件目录
    this.pluginPath = '';
    //导出路径
    this.exportPath = '';
    //文件路径
    this.tmpPath = {};
    //当前sketch文件内所有画板图层数据
    this.sketchData = {
        //页面数据
        page: [],
        //画板数据
        artboard: {
            //'objectId1': [],
            //'objectId2': [],
        }
    };
}

BayMax.prototype = {
    run: function(){
        var self = this;
        //当前文档下所有页面
        var pages = doc.pages();
        var basePath = '';
        //用户选择的导出路径
        var exportPath = null;

        //初始化临时目录路径
        self.initTmpPath();
        //获取系统语言
        self.getSysLanguage();
        //获取插件所在目录
        self.getPluginPath();

        //临时文件跟目录
        basePath = self.tmpPath.basePath;

        //console.log('=== start ===');

        //遍历所有页面
        Util.each(pages, function(page, index){
            var data = {
                //页面名
                name: page.name() +'',
                //页面唯一id
                pageId: page.objectID() +'',
                //页面下画板id列表(保证显示的顺序)
                artboard: []
            }
            //页面下所有画板
            var artboards = page.artboards();

            if([artboards count] > 0){
                Util.each(artboards, function(artboard, aindex){
                    var artboardId = artboard.objectID() +'';
                    var artFrame = artboard.frame();
                    //画板
                    data.artboard.push({
                        id: artboardId,
                        x: artFrame.x(),
                        y: artFrame.y(),
                        name: artboard.name() +'',
                        width: artFrame.width(),
                        height: artFrame.height()
                    });

                    //在临时目录中创建画板文件夹
                    artboardPath = [basePath stringByAppendingPathComponent: artboardId];
                    [[NSFileManager alloc] createDirectoryAtPath:artboardPath withIntermediateDirectories:nil attributes:nil error:nil];
                    
                    //添加到画板队列
                    self.allArtboards.push(artboard);
                });
            }

            self.sketchData.page.push(data);
        });
        
        //设置最大索引
        self.maxIndex = self.allArtboards.length;

        //遍历画板处理图层数据
        if(self.maxIndex > 0){
            exportPath = self.getExportPath();
            //让用户选择导出目录
            if(exportPath){
                //处理画板
                self.collectArtboard();
            }else{
                doc.showMessage(I18N.CANCELEXPORT);
            }
        }else{
            //没有画板
            self.showTips({content:I18N.NOARTBOARD});
        }
    },

    //获取系统语言（只处理中英文）
    getSysLanguage: function(){
        var defs = [NSUserDefaults standardUserDefaults];
        var languages = [[defs objectForKey:@"AppleLanguages"] objectAtIndex:0];

        //获取到语言后重新设置I18N变量，以简化操作
        if(languages != 'zh-Hans'){
            I18N = I18N['en'];
        }else{
            I18N = I18N['zh-cn'];
        }
    },

    //获取插件目录（不同的插件版本目录是不一样的）
    getPluginPath: function(){
        var pluginPaths =['~/Library/Containers/com.bohemiancoding.sketch3/Data/Library/Application Support/com.bohemiancoding.sketch3/Plugins', '~/Library/Application Support/com.bohemiancoding.sketch3/Plugins','~/Library/Containers/com.bohemiancoding.sketch3/Data/Library/Application Support/com.bohemiancoding.sketch3/Plugins/Marketch', '~/Library/Application Support/com.bohemiancoding.sketch3/Plugins/Marketch'];
        var thePluginPath = '';
        
        Util.each(pluginPaths, function(path){
            var thePath = [NSString stringWithFormat:@"%@/%@", path, @'marketch.sketchplugin'];
            
            if([[NSFileManager defaultManager] fileExistsAtPath:[thePath stringByExpandingTildeInPath]]){
                thePluginPath = thePath;
            }
        });
        //将路径中的代字符扩展成用户主目录
        this.pluginPath = [thePluginPath stringByExpandingTildeInPath];
    },

    //初始化临时目录路径
    initTmpPath: function(){
        //临时目录
        var tmpPath = NSTemporaryDirectory();
        var basePath = [tmpPath stringByAppendingPathComponent: @"com.sketch.cosa"];
        var imagePath = '';
        var dataPath = '';

        //删除主目录（如果存在）
        [[NSFileManager alloc] removeItemAtPath:basePath error:nil];
        //重新创建主目录
        [[NSFileManager alloc] createDirectoryAtPath:basePath withIntermediateDirectories:nil attributes:nil error:nil]; 
        //数据文件路径
        dataPath = [basePath stringByAppendingPathComponent: @"data.js"];
        //html文件路径
        htmlPath = [basePath stringByAppendingPathComponent: @"index.html"];

        //console.log('临时目录:'+ tmpPath);
        //基础路径
        this.tmpPath.basePath = basePath;
        //数据文件路径
        this.tmpPath.dataPath = dataPath;
        //html文件路径
        this.tmpPath.htmlPath = htmlPath;
    },

    //获取导出路径
    getExportPath: function(){
        var savePanel = NSSavePanel.savePanel();

        savePanel.setTitle(I18N.EXPORT);
        savePanel.setNameFieldLabel(I18N.EXPORTTO);
        savePanel.setShowsTagField(false);
        savePanel.setAllowedFileTypes(NSArray.arrayWithObject(@"zip"));
        savePanel.setAllowsOtherFileTypes(false);
        savePanel.setCanCreateDirectories(true);

        if (savePanel.runModal() != NSOKButton){
            return false;
        }else{
            //console.log('导出目录：'+　savePanel.URL().path());
            this.exportPath = savePanel.URL().path();//[[savePanel URL] path]
            return true;
        }
    },

    //保存数据文件
    saveDataFile: function(){
        var jsonData = 'var pageData = '+ JSON.stringify(this.sketchData);
        var content = [NSString stringWithCString:jsonData encoding:NSUTF8StringEncoding];
        var dataPath = this.tmpPath.dataPath;

        [content writeToFile:dataPath atomically:1 encoding:NSUTF8StringEncoding error:nil];
    },

    //保存html文件
    copyHtmlFile: function(){
        var basePath = this.tmpPath.basePath;
        var pluginPath = this.pluginPath;
        var sourcePath = [pluginPath stringByAppendingPathComponent: @'Contents/sketch/index.html'];
        var saveHtmlPath = [basePath stringByAppendingPathComponent: @'index.html'];

        //console.log(htmlPath);
        //console.log(saveHtmlPath);

        [[NSFileManager defaultManager] copyPath:sourcePath toPath:saveHtmlPath handler:nil];
    },

    //复制当前sketch文件
    copySkethFile: function(){
        var basePath = this.tmpPath.basePath;
        var sketchName = doc.displayName();
        //sketch源文件在临时目录中的保存路径
        var savePath = '';
        //sketch源文件所在路径
        var sketchFilePath = [doc fileURL];

        if(!(/\.sketch$/.test(sketchName))){
            sketchName += '.sketch';
        }
        savePath = [basePath stringByAppendingPathComponent: sketchName];

        if(sketchFilePath){
            //如果sketch文件没有保存sketchFilePath会返回null就不需要复制sketch源文件了
            sketchFilePath = [sketchFilePath path];
            [[NSFileManager defaultManager] copyPath:sketchFilePath toPath:savePath handler:nil];
        }
    },

    //打包文件
    zipFile: function(){
        //打包导出目录
        var destination = this.exportPath;
        //源文件目录
        var zipFile = this.tmpPath.basePath;
        var zipTask = [[NSTask alloc] init];

        [zipTask setLaunchPath:@"/usr/bin/ditto"];
        //zip参数
        [zipTask setArguments:[NSArray arrayWithObjects: @"-c", @"-k", @"-X", @"--rsrc", zipFile, destination, nil]];

        [zipTask launch];
        [zipTask waitUntilExit];

        if ([zipTask terminationStatus] != 0){
            //task执行失败
            return {
                success: false,
                msg: [zipTask terminationReason]
            }
        }else{
            //task执行成功
            return {
                success: true
            }
        }
    },

    /*
     * 导出图层
     * layer 需要导出的图层
     * options 导出选项
     * options.name 导出文件名，defalt: 2
     * options.path 导出路径，defalt: 2
     * options.scale 导出缩放默认，defalt: 2
     */
    exportLayer: function(layer, options){
        //导出配置
        var exportConfig = {
            name: options.path +'/'+ options.name +'.png',
            format: 'png',
            scale: options.scale,
        };
        // Actual writing of asset
        var slice;
        var imgData;
        var rect = [layer absoluteInfluenceRect];

        slice = [[MSSliceMaker slicesFromExportableLayer: layer inRect: rect] firstObject];
        slice.page = [[doc currentPage] copyLightweight];
        slice.format = exportConfig.format;
        slice.scale = exportConfig.scale

        [[MSSliceExporter dataForRequest: slice] writeToFile:exportConfig.name atomically:true];
    },

    //获取图层数据
    getLayerData: function(layer){
        var layerType = [layer className];
        var frame = [layer absoluteRect];
        var layerData = {};
        //图层阴影
        var shadow = Util.getShadow(layer);
        //边框
        var border = layer.style().borders().firstObject();
        //填充
        var fill = layer.style().fills().firstObject();

        //console.log([layer name]);
        //console.log('\t\t\t: '+ frame);

        //基本信息
        layerData = {
            'id': [layer objectID] +'',
            name: [layer name] +'',
            x: Math.ceil([frame x]),
            y: Math.ceil([frame y]),
            width: Math.ceil([frame width]),
            height: Math.ceil([frame height]),
            style: {}
        }

        if(border){
            layerData.border = {
                width: border.thickness(),
                color: Util.toRGBA(border.color())
            }

            layerData.style['border'] = border.thickness() +'px solid '+ Util.toRGBA(border.color());
        }
        
        //路径图层名字都是shap，需要换成parentGroup的名称
        if(layer && layer.isKindOfClass(MSShapeGroup)) {
            layerData.name = [[layer parentGroup] name] + '';
            
            var shape=layer.layers().firstObject();
            if(shape && shape.isKindOfClass(MSRectangleShape)) {
                layerData.radius = shape.fixedRadius();
                layerData.style['border-radius'] = shape.fixedRadius() +'px';
            }
        }

        if(fill){
            layerData.background = Util.toRGBA(fill.color());
            layerData.style.background = Util.toRGBA(fill.color());
        }
        
        //console.log('    -> '+ layerData.name);
        //console.log('    -> '+ layerData.x, layerData.y, layerData.width, layerData.height);

        //文字图层
        if(layerType == 'MSTextLayer'){
            var font = [layer font];

            layerData.html = [layer stringValue] +'';

            layerData.style['line-heihgt'] = Math.ceil([layer lineSpacing]) +'px';
            layerData.style['text-align'] = Util.getTextAlign(layer);
            layerData.style['font-size'] = Math.ceil([layer fontSize]) +'px';
            layerData.style['color'] = Util.toRGBA(layer.textColor());
            layerData.style['font-family'] = [font familyName] +'';

            if(Util.getFontWeight(font) != ''){
                layerData['style']['font-weight'] = Util.getFontWeight(font);
            }
            if(layer.characterSpacing()){
                layerData['style']['letter-spacing'] = Math.ceil(layer.characterSpacing()) +'px';
            }

            if(shadow){
                layerData['style']['text-shadow'] = shadow;
            }
        }

        //位图
        if(layerType == 'MSBitmapLayer' && shadow){
            layerData['style']['text-shadow'] = shadow;
        }

        return layerData;
    },

    //图层组是否包含文字图层
    hasTextLayer: function(layerGroup){
        var hasTextLayer = false;
        var childLayer = [layerGroup children];
        
        Util.each(childLayer, function(layer, index){
            if(!hasTextLayer && [layer className] == 'MSTextLayer'){
                hasTextLayer = true;
            }
        });

        return hasTextLayer;
    },

    //处理所有图层
    collectAllLayers: function(){
        var self = this;
        var currentLayers = self.queue.current;
        var nextQueue = self.queue.next;
        //当前画板
        var currentArtboard = self.allArtboards[self.index];
        //当前画板id
        var artboardId = currentArtboard.objectID() +'';
        //当前画板图层数据(数组)
        var layerData = self.sketchData.artboard[artboardId] || [];
        //临时文件基础路径
        var basePath = self.tmpPath.basePath;
        //当前画板图片保存路径
        var artboardPath = [basePath stringByAppendingPathComponent: artboardId];

        //遍历当前画布所有图层
        Util.each(currentLayers, function(layer, index){
            var rect = {};
            var fileName = '';
            var layerId = layer.objectID() +'';
            var className = layer.className() +'';
            var key = index;
            //图层导出配置
            var exprotConfig = {
                name: layerId,
                path: artboardPath,
                scale: 2
            }
            switch(className){
                case 'MSTextLayer':
                    layerData.push(self.getLayerData(layer));
                    break;

                case 'MSBitmapLayer':
                    layerData.push(self.getLayerData(layer));
                    //导出位图
                    self.exportLayer(layer, exprotConfig);
                    break;

                case 'MSShapeGroup':
                    //按组导出形状
                    layerData.push(self.getLayerData(layer));
                    //导出形状
                    self.exportLayer(layer, exprotConfig);
                    break;

                case 'MSLayerGroup':
                    var frame = layer.frame();
                    //是否存在文字图层
                    var hasTextLayer = self.hasTextLayer(layer);
                    //w*h < 150 * 150并且不包含文字图层按组导出
                    if(frame.width() * frame.height() < 22500 && !hasTextLayer){
                        //按组导出形状
                        layerData.push(self.getLayerData(layer));
                        //导出形状
                        self.exportLayer(layer, exprotConfig);
                    }else{
                        var childLayers = layer.layers().array();
                        Util.each(childLayers, function(childLayer, n){
                            //把子图层组下的所有图层加入到下一次遍历的队列中
                            nextQueue.push(childLayer);
                        });
                    }
                    break;
            }
        });

        self.sketchData.artboard[artboardId] = layerData;
        
        if(nextQueue.length > 0){
            self.queue.current = nextQueue;
            self.queue.next = [];
            //递归处理图层组
            self.collectAllLayers();
        }else{
            //索引递增
            self.index++;

            if(self.index < self.maxIndex){
                //继续遍历下一个画板
                self.collectArtboard();
            }else{
                self.saveExportData();
            }
        }
    },

    //从临时文件中打包文件到目标文件夹
    saveExportData:function(){
        //打包结果
        var zipResult = null;
        //保存图层数据
        this.saveDataFile();
        //复制html页面
        this.copyHtmlFile();
        //复制当前sketch文件
        this.copySkethFile();

        zipResult = this.zipFile();

        //打包
        if(zipResult.success){
            this.showTips({content: I18N.EXPORTSUCCESS});
        }else{
            this.showTips({content: zipResult.msg});
        }
    },

    //迭代处理画板
    collectArtboard: function(){
        var basePath = this.tmpPath.basePath;
        //当前画板
        var currentArtboard = this.allArtboards[this.index];
        var artboardId = currentArtboard.objectID() +'';
        //画板截图保存路径
        var artboardPath = [basePath stringByAppendingPathComponent: artboardId];
        //当前画板所在的页面
        var artboardPage = currentArtboard.parentGroup();

        //激活当前画板所在页面
        [doc setCurrentPage:artboardPage];
        //导出画板为图片(@2x)
        this.exportLayer(currentArtboard, {name: 'artboard', path: artboardPath, scale: 2});
        //清空next队列（next用于保存collectAllLayers方法中遍历找到的layerGroup）
        this.queue.next = [];
        //保存当前画板下图层到队列
        this.queue.current = currentArtboard.layers();
        //处理所有的图层
        this.collectAllLayers();
    },

    /*
     * 消息提示
     * obj.title
     * obj.content
     */
    showTips: function(obj){
        var title = obj.title || "Marketch for Sketch"
        var app = [NSApplication sharedApplication];

        [app displayDialog:obj.content withTitle:title];
        /*
        var altWin = [COSAlertWindow new];
        var icon = NSImage.alloc().initByReferencingFile(this.pluginPath +'/Contents/Sketch/assets/icon.ico');
        
        altWin.setIcon(icon);
        altWin.addButtonWithTitle('OK')

        altWin.setMessageText(obj.title || 'Marketch');
        altWin.setInformativeText(obj.content);
        return altWin.runModal();
        */
    }
}

function onRun(context){
    doc = context.document;
    new BayMax().run();
}