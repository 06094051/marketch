@import "util.cocoascript";

var console = {log: Util.log}
var html = [];
html.push("<!DOCTYPE html>\r\n");
html.push("<html>\r\n");
html.push("<head>\r\n");
html.push("<meta charset=\"utf-8\">\r\n");
html.push("<title>demo</title>\r\n");
html.push("<style>\r\n");
html.push("body,h1,h2,h3,h4,h5,h6,p,blockquote,dl,dt,dd,ul,ol,li,pre,form,fieldset,legend,button,input,textarea,th,td {margin:0;padding:0;}\r\n");
html.push("body,button,input,select,textarea {font: 12px/1.5 tahoma,arial,'Hiragino Sans GB',\5FAE\8F6F\96C5\9ED1,sans-serif;}\r\n");
html.push("h1,h2,h3,h4,h5,h6,button,input,select,textarea {font-size:100%;}\r\n");
html.push("label,input,select {vertical-align:middle;}\r\n");
html.push("address,cite,em {font-style:normal;}\r\n");
html.push("fieldset,img {border:none;}\r\n");
html.push("ul,ol {list-style:none;}\r\n");
html.push("table {border-collapse:collapse}\r\n");
html.push("sub {vertical-align:text-bottom;}\r\n");
html.push("sup {vertical-align:text-top;}\r\n");
html.push("small {font-size:12px;}\r\n");
html.push("legend {color:#555;}\r\n");
html.push("a, a:visited {text-decoration:none;}\r\n");
html.push("a:hover {text-decoration:none;}\r\n");
html.push("a {color:#333}\r\n");
html.push("a:hover {color:#06c;}\r\n");
html.push("input[type=text], textarea {outline:0;padding:3px;}\r\n");
html.push(".page {position:relative;padding:0;}\r\n");
html.push(".wrap {position:relative;z-index:0;overflow:hidden;}\r\n");
html.push(".wrap:after {content:'';display:block;clear:both;height:0;overflow:hidden;}\r\n");
html.push(".wrap-layer {display:none;}\r\n");
html.push(".wrap-layer-active {display:block;}\r\n");
html.push(".wrap-layer div {box-sizing:border-box;}\r\n");
html.push(".wrap-layer div[aid]:hover {border:1px solid #004BD2;}\r\n");
html.push(".sketch-marker {position:absolute;visibility:hidden;top:140px;left:300px;z-index:9;border:1px solid #FE3B00;width:200px;height:200px;text-align:center;vertical-align:center;pointer-events:none;background:rgba(0,0,0);}\r\n");
html.push(".sketch-marker-disable b {visibility:hidden;}\r\n");
html.push(".sketch-marker span {position:absolute;z-index:2;width:7px;height:7px;}\r\n");
html.push(".sketch-marker span:before {content:'';position:absolute;z-index:0;width:1px;height:9999px;border-left:1px dashed #FE3B00;}\r\n");
html.push(".sketch-marker span:after {content:'';position:absolute;z-index:0;height:1px;min-width:9999px;border-bottom:1px dashed #FE3B00;}\r\n");
html.push(".sketch-marker em {position:absolute;left:0;top:0;z-index:1;width:5px;height:5px;border:1px solid #FE3B00;border-radius:100%;background:#fff;background:#fff;}\r\n");
html.push(".sketch-marker .skm-tl {top:-4px;left:-4px;}\r\n");
html.push(".sketch-marker .skm-tl:before {margin-left:-1px;bottom:100%;}\r\n");
html.push(".sketch-marker .skm-tl:after {margin-top:2px;right:-100%;}\r\n");
html.push(".sketch-marker .skm-tr {top:-4px;right:-4px;}\r\n");
html.push(".sketch-marker .skm-tr:before {margin-left:-1px;bottom:100%;}\r\n");
html.push(".sketch-marker .skm-tr:after {margin-top:2px;left:-100%;}\r\n");
html.push(".sketch-marker .skm-bl {bottom:-4px;left:-4px;}\r\n");
html.push(".sketch-marker .skm-bl:before {margin-left:-1px;top:100%;}\r\n");
html.push(".sketch-marker .skm-bl:after {margin-top:2px;right:-100%;}\r\n");
html.push(".sketch-marker .skm-br {bottom:-4px;right:-4px;}\r\n");
html.push(".sketch-marker .skm-br:before {margin-left:-1px;top:100%;}\r\n");
html.push(".sketch-marker .skm-br:after {margin-top:2px;left:-100%;}\r\n");
html.push(".skm-w, .skm-h {position:relative;display:inline-block;vertical-align:middle;z-index:2;}\r\n");
html.push(".skm-w:after, .skm-h:after {display:block;top:0;left:0;right:0;padding:0 5px;border-radius:3px;height:18px;line-height:18px;font-size:12px;font-weight:100;color:#FE3B00;background:#fff;}\r\n");
html.push(".sketch-marker .skm-w {margin-top:-39px;padding-bottom:5px;}\r\n");
html.push(".sketch-marker .skm-w:after {content:attr(w)'px';}\r\n");
html.push(".sketch-marker .skm-h {position:absolute;top:50%;left:100%;margin-top:-9px;padding-left:5px;}\r\n");
html.push(".sketch-marker .skm-h:after {content:attr(h)'px';}\r\n");
html.push(".skm-rule {position:absolute;z-index:10;text-align:center;visibility:hidden;}\r\n");
html.push(".skm-rule span {display:inline-block;padding:0 5px;border-radius:3px;height:18px;line-height:18px;font-size:12px;font-weight:100;color:#FE3B00;background:#fff;}\r\n");
html.push(".skm-r-left, .skm-r-right {width:100px;height:0;border-bottom:1px solid #FE3B00;}\r\n");
html.push(".skm-r-left span, .skm-r-right span {position:relative;top:-24px;}\r\n");
html.push(".skm-r-left:before, .skm-r-left:after, .skm-r-right:before, .skm-r-right:after {content:'';position:absolute;height:9px;width:1px;background:#fe3b00;}\r\n");
html.push(".skm-r-left:before, .skm-r-right:before {top:-4px;left:0px;}\r\n");
html.push(".skm-r-left:after, .skm-r-right:after {top:-4px;right:0px;}\r\n");
html.push(".skm-r-top, .skm-r-bottom {height:100px;width:0;border-left:1px solid #FE3B00;}\r\n");
html.push(".skm-r-top span, .skm-r-bottom span {position:absolute;top:50%;margin:-9px 0 0 5px;}\r\n");
html.push(".skm-r-top:before, .skm-r-top:after, .skm-r-bottom:before, .skm-r-bottom:after {content:'';position:absolute;width:9px;height:1px;background:#fe3b00;}\r\n");
html.push(".skm-r-top:before, .skm-r-bottom:before {top:0;left:-5px;}\r\n");
html.push(".skm-r-top:after, .skm-r-bottom:after {bottom:0;left:-5px;}\r\n");
html.push(".panel {position:fixed;top:0;right:-200px;bottom:0;z-index:1;padding:10px 5px 10px 10px;width:185px;color:#fff;background:#2B3A48;-webkit-transition:right 0.1s ease-in-out;}\r\n");
html.push(".panel-active {right:0;box-shadow:-2px 0 5px rgba(0,0,0,.4);}\r\n");
html.push(".panel dl {margin-bottom:20px;}\r\n");
html.push(".panel dt {position:relative;height:18px;line-height:18px;}\r\n");
html.push(".panel dt span {position:relative;z-index:2;padding:0 5px 0 0;color:#ddd;background:#2B3A48;}\r\n");
html.push(".panel dt:after {content:'';position:absolute;left:0;top:9px;width:180px;height:1px;background:#424E5A;}\r\n");
html.push(".panel dd {padding:5px 0;overflow:hidden;}\r\n");
html.push(".panel dd ul {overflow:hidden;}\r\n");
html.push(".panel li {float:left;width:50%;}\r\n");
html.push(".panel li label {float:left;}\r\n");
html.push(".panel li input {float:left;border:0;width:100px;}\r\n");
html.push(".panel dd p, .panel dd textarea {padding:3px;width:175px;border:0;max-height:200px;border-radius:3px;color:#b3b8bd;background:#555C64;overflow:auto;}\r\n");
html.push(".panel dd textarea {height:180px;resize:none;}\r\n");
html.push(".export-btn {padding-top:10px;text-align:center;}\r\n");
html.push(".panel-export, .panel-export:hover {display:inline-block;padding:0 15px;height:24px;line-height:24px;border-radius:3px;color:#b3b8bd;box-shadow:0 0 3px rgba(0,0,0,.4);background:#434950;}\r\n");
html.push("</style>\r\n");
html.push("</head>\r\n");
html.push("<body>\r\n");
html.push("<div class=\"page\">\r\n");
html.push("<div class=\"switch\">\r\n");
html.push("<select id=\"sw-page\"></select>\r\n");
html.push("<select id=\"sw-artboard\"></select>\r\n");
html.push("</div>\r\n");
html.push("<div class=\"wrap\" id=\"wrap\"></div>\r\n");
html.push("<div class=\"panel\" id=\"panel\">\r\n");
html.push("</div>\r\n");
html.push("</div>\r\n");
html.push("<xxoo src='http://libs.baidu.com/jquery/1.9.0/jquery.js'></xxoo>\r\n");
html.push("<xxoo src='http://alisec.org/js/sketch.js'></xxoo>\r\n");
html.push("</body>\r\n");
html.push("</html>\r\n");
//文档对象
var doc = null;

var BayMax = function(){
    //所有画板
    this.allArtboards = [];
    //当前画板索引
    this.index = 0;
    //总画板数
    this.maxIndex = 0;
    //队列(用于处理图层)
    this.queue = {
        //当前正在遍历的队列
        current: [],
        //遍历过程中新产生的group
        next: []
    }
    
    //导出路径
    this.exportPath = '';
    //文件路径
    this.tmpPath = {};
    //当前sketch文件内所有画板图层数据
    this.sketchData = {
        //页面数据
        page: [],
        //画板数据
        artboard: {
            //'objectId1': [],
            //'objectId2': [],
        }
    };
}

BayMax.prototype = {
    //TODO 获取图层style
    getLayerStyle: function(layer){
        var fill = layer.style().fills().firstObject().color();
        var border = layer.style().borders().firstObject().thickness();
        //shadows =layer.style().shadows().array(),
        //innerShadows =layer.style().innerShadows().array()
        //TODO

        //console.log(border);
        //return styles
    },

    //获取导出路径
    getExportPath: function(){
        var savePanel = [NSSavePanel savePanel];

        [savePanel setTitle:@"导出"]
        [savePanel setNameFieldLabel:@"导出到:"]
        [savePanel setShowsTagField:false]
        [savePanel setAllowedFileTypes: [NSArray arrayWithObject:@"zip"]]
        [savePanel setAllowsOtherFileTypes:false]
        [savePanel setCanCreateDirectories:true]

        if ([savePanel runModal] != NSOKButton) {
            return false;
        }

        this.exportPath = [[savePanel URL] path]
    },

    //保存数据文件
    saveDataFile: function(){
        var jsonData = 'var pageData = '+ JSON.stringify(this.sketchData);
        var content = [NSString stringWithCString:jsonData encoding:NSUTF8StringEncoding];
        var dataPath = this.tmpPath.dataPath;

        [content writeToFile:dataPath atomically:1 encoding:NSUTF8StringEncoding error:nil]; 
    },

    //保存html文件
    saveHtmlFile: function(){
        var demoHtml = html.join('').replace(/xxoo/g, 'script');
        var content = [NSString stringWithCString:demoHtml encoding:NSUTF8StringEncoding];
        var htmlPath = this.tmpPath.htmlPath;

        [content writeToFile:htmlPath atomically:1 encoding:NSUTF8StringEncoding error:nil]; 
    },

    //复制当前sketch文件
    copySkethFile: function(){
        var basePath = this.tmpPath.basePath;
        var sketchName = doc.displayName();
        var savePath = [basePath stringByAppendingPathComponent: sketchName];
        var sketchFilePath = doc.fileURL().path();

        [[NSFileManager defaultManager] copyPath:sketchFilePath toPath:savePath handler:nil];
    },

    //初始化临时目录路径
    initTmpPath: function(){
        //临时目录
        var tmpPath = NSTemporaryDirectory();
        var basePath = [tmpPath stringByAppendingPathComponent: @"com.sketch.cosa"];
        var imagePath = '';
        var dataPath = '';

        //删除主目录（如果存在）
        [[NSFileManager alloc] removeItemAtPath:basePath error:nil];
        //重新创建主目录
        [[NSFileManager alloc] createDirectoryAtPath:basePath withIntermediateDirectories:nil attributes:nil error:nil]; 
        //数据文件路径
        dataPath = [basePath stringByAppendingPathComponent: @"data.js"];
        //html文件路径
        htmlPath = [basePath stringByAppendingPathComponent: @"index.html"];

        //基础路径
        this.tmpPath.basePath = basePath;
        //图片路径
        //this.tmpPath.imgPath = imagePath;
        //数据文件路径
        this.tmpPath.dataPath = dataPath;
        //html文件路径
        this.tmpPath.htmlPath = htmlPath;
    },

    //打包文件
    zipFile: function(){
        var destination = this.exportPath;
        var zipFile = this.tmpPath.basePath;
        var task = [[NSTask alloc] init];
        var argsArray = null;

        [task setCurrentDirectoryPath:zipFile]; 
        [task setLaunchPath:@"/usr/bin/zip"];
        argsArray = [NSArray arrayWithObjects:@"-r", @"-q", destination, @".", @"-i", @"*", nil];
        [task setArguments:argsArray];
        [task launch];
        [task waitUntilExit];
    },

    /*
     * 导出图层
     * layer 需要导出的图层
     * options 导出选项
     * options.name 导出文件名，defalt: 2
     * options.path 导出路径，defalt: 2
     * options.scale 导出缩放默认，defalt: 2
     */
    exportLayer: function(layer, options){
        //导出配置
        var exportConfig = {
            name: options.path +'/'+ options.name +'.png',
            format: 'png',
            scale: options.scale,
        };
        // Actual writing of asset
        var slice;
        var imgData;
        var rect = [layer absoluteInfluenceRect];

        slice = [[MSSliceMaker slicesFromExportableLayer: layer inRect: rect] firstObject];
        slice.page = [[doc currentPage] copyLightweight];
        slice.format = exportConfig.format;
        slice.scale = exportConfig.scale

        [[MSSliceExporter dataForRequest: slice] writeToFile:exportConfig.name atomically:true];
    },

    //获取图层数据
    getLayerData: function(layer){
        var layerType = [layer className];
        var frame = [layer absoluteRect];
        var layerData = {};
        //图层阴影
        var shadow = Util.getShadow(layer);

        //console.log([layer name]);
        //console.log('\t\t\t: '+ frame);

        //基本信息
        layerData = {
            'id': [layer objectID] +'',
            name: [layer name] +'',
            x: Math.ceil([frame x]),
            y: Math.ceil([frame y]),
            width: Math.ceil([frame width]),
            height: Math.ceil([frame height])
        }

        //路径图层名字都是shap，需要换成parentGroup的名称
        if(layerType.indexOf('Shap') > -1 && [[layer parentGroup] className] == 'MSShapeGroup'){
            layerData.name = [[layer parentGroup] name] + '';
        }

        //console.log('    -> '+ layerData.name);
        //console.log('    -> '+ layerData.x, layerData.y, layerData.width, layerData.height);

        //文字图层
        if(layerType == 'MSTextLayer'){
            var font = [layer font];

            layerData.html = [layer stringValue] +'';
            layerData.style = {
                'line-height': Math.ceil([layer lineSpacing]) +'px',
                'text-align': Util.getTextAlign(layer),
                'font-size': Math.ceil([layer fontSize]) +'px',
                'color': Util.toRGBA(layer.textColor()),
                'font-family': [font familyName] +''
            }

            if(Util.getFontWeight(font) != ''){
                layerData['style']['font-weight'] = Util.getFontWeight(font);
            }
            if(layer.characterSpacing()){
                layerData['style']['letter-spacing'] = Math.ceil(layer.characterSpacing()) +'px';
            }

            if(shadow){
                layerData['style']['text-shadow'] = shadow;
            }
        }

        //位图
        if(layerType == 'MSBitmapLayer' && shadow){
            layerData['style'] = {
                'text-shadow': shadow
            };
        }

        return layerData;
    },

    //图层组是否包含文字图层
    hasTextLayer: function(layerGroup){
        var hasTextLayer = false;
        var childLayer = [layerGroup children];
        
        Util.each(childLayer, function(layer, index){
            if(!hasTextLayer && [layer className] == 'MSTextLayer'){
                hasTextLayer = true;
            }
        });

        return hasTextLayer;
    },

    //处理所有图层
    collectAllLayers: function(){
        var self = this;
        var currentLayers = self.queue.current;
        var nextQueue = self.queue.next;
        //当前画板
        var currentArtboard = self.allArtboards[self.index];
        //当前画板id
        var artboardId = currentArtboard.objectID() +'';
        //当前画板图层数据(数组)
        var layerData = self.sketchData.artboard[artboardId] || [];
        //临时文件基础路径
        var basePath = self.tmpPath.basePath;
        //当前画板图片保存路径
        var artboardPath = [basePath stringByAppendingPathComponent: artboardId];

        //遍历当前画布所有图层
        Util.each(currentLayers, function(layer, index){
            var rect = {};
            var fileName = '';
            var layerId = layer.objectID() +'';
            var className = layer.className() +'';
            var key = index;
            //图层导出配置
            var exprotConfig = {
                name: layerId,
                path: artboardPath,
                scale: 2
            }
            switch(className){
                case 'MSTextLayer':
                    layerData.push(self.getLayerData(layer));
                    break;

                case 'MSBitmapLayer':
                    layerData.push(self.getLayerData(layer));
                    //导出位图
                    self.exportLayer(layer, exprotConfig);
                    break;

                case 'MSShapeGroup':
                    //按组导出形状
                    layerData.push(self.getLayerData(layer));
                    //导出形状
                    self.exportLayer(layer, exprotConfig);
                    break;

                case 'MSLayerGroup':
                    var frame = layer.frame();
                    //是否存在文字图层
                    var hasTextLayer = self.hasTextLayer(layer);
                    //w*h < 150 * 150并且不包含文字图层按组导出
                    if(frame.width() * frame.height() < 22500 && !hasTextLayer){
                        //按组导出形状
                        layerData.push(self.getLayerData(layer));
                        //导出形状
                        self.exportLayer(layer, exprotConfig);
                    }else{
                        var childLayers = layer.layers().array();
                        Util.each(childLayers, function(childLayer, n){
                            //把子图层组下的所有图层加入到下一次遍历的队列中
                            nextQueue.push(childLayer);
                        });
                    }
                    break;
            }
        });

        self.sketchData.artboard[artboardId] = layerData;
        
        if(nextQueue.length > 0){
            self.queue.current = nextQueue;
            self.queue.next = [];
            //递归处理图层组
            self.collectAllLayers();
        }else{
            //索引递增
            self.index++;

            if(self.index < self.maxIndex){
                //继续遍历下一个画板
                self.collectArtboard();
            }else{
                //保存图层数据
                self.saveDataFile();
                //保存图层数据
                self.saveHtmlFile();
                //复制当前sketch文件
                self.copySkethFile();
                //打包
                self.zipFile();
                //显示提示信息
                [doc showMessage:@'导出成功'];
            }
        }
    },

    //迭代处理画板
    collectArtboard: function(){
        var basePath = this.tmpPath.basePath;
        //当前画板
        var currentArtboard = this.allArtboards[this.index];
        var artboardId = currentArtboard.objectID() +'';
        //画板截图保存路径
        var artboardPath = [basePath stringByAppendingPathComponent: artboardId];
        //当前画板所在的页面
        var artboardPage = currentArtboard.parentGroup();

        //激活当前画板所在页面
        [doc setCurrentPage:artboardPage];
        //导出画板为图片(@2x)
        this.exportLayer(currentArtboard, {name: 'artboard', path: artboardPath, scale: 2});
        //清空next队列（next用于保存collectAllLayers方法中遍历找到的layerGroup）
        this.queue.next = [];
        //保存当前画板下图层到队列
        this.queue.current = currentArtboard.layers();
        //处理所有的图层
        this.collectAllLayers();
    },

    run: function(){
        var self = this;
        //当前文档下所有页面
        var pages = doc.pages();
        var basePath = '';

        if([doc isDraft]){
            doc.showMessage("请先保存文档");
            return false;
        }

        //让用户选择导出目录
        self.getExportPath();
        //初始化临时目录路径
        self.initTmpPath();

        basePath = self.tmpPath.basePath;

        //console.log('============ start ============');

        //遍历所有页面
        Util.each(pages, function(page, index){
            var data = {
                //页面名
                name: page.name() +'',
                //页面唯一id
                pageId: page.objectID() +'',
                //页面下画板id列表(保证显示的顺序)
                artboard: []
            }
            //页面下所有画板
            var artboards = page.artboards();

            Util.each(artboards, function(artboard, aindex){
                var artboardId = artboard.objectID() +'';
                var artFrame = artboard.frame();
                //画板
                data.artboard.push({
                    id: artboardId,
                    x: artFrame.x(),
                    y: artFrame.y(),
                    name: artboard.name() +'',
                    width: artFrame.width(),
                    height: artFrame.height()
                });

                //在临时目录中创建画板文件夹
                artboardPath = [basePath stringByAppendingPathComponent: artboardId];
                [[NSFileManager alloc] createDirectoryAtPath:artboardPath withIntermediateDirectories:nil attributes:nil error:nil];
                
                //添加到画板队列
                self.allArtboards.push(artboard);
            });

            self.sketchData.page.push(data);
        });
        
        //设置最大索引
        self.maxIndex = self.allArtboards.length;
        //遍历画板处理图层数据
        self.collectArtboard();
    }
}

function onRun(context){
    try{
        doc = context.document;
        new BayMax().run();
    }catch(e){
        console.log(e);
    }
}